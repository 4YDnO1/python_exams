#---
#--- Задача 5. Экз №2.
#--- Создание матрица размерами n на n
#--- с закручиванием по спирали к центрту
#--- с попутным увелечением значения
#--- ячейки от 1 до n^2
#---


#--- выполнение задачи идёт путём 3 шагов
#--- 1 шаг
#--- принятие размера и создание шаблона матрицы

#--- 2 шаг
#--- заполнение матрицы правильными данными:
#--- заполняем первый ряд
#--- заполняем данные линии n - 1
#--- попутно каждые 2 поворота уменьшаем на -1 кол-во ячейек в линии

#--- 3 шаг
#--- 2-ух цикольный вывод созданной матрицы матрицы


#--- Начало программы

#--- 1 шаг

#-- принятие размера матрицы
n = int(input())
#-- создание шаблона n на n (запонен нулями)
matrix = []

for y in range(n):
	newRow = [] 
	for x in range(n): 
		newRow.append(0)
	matrix.append(newRow)

#--- 2 шаг

#--- счётчик цифр по спирали
number = 1

#--- счётчик повёрнутых углов по спирали
#--- (начинаем с -1 т.к. с начала пройдём 3 раза n - 1 
#--- а остальные по 2 (например: 2 по 3, 2 по 2, 2 по 1))
corners = -1

#--- счётчик заполнения ячеек от n-1 до 0
#--- уменьшается каждые 2 пройденных угла (c начала с 3 поворотов) 
cells = n - 1

#--- массив направлений движения (по часовой)
moves = [[-1, 0], [0, 1], [1, 0], [0, -1]]

#--- начальное направление (в право) - индекс 1 в движениях
dirIndex = 1
dir = moves[dirIndex]

#--- начальные координаты x, y
#--- выполнены с помощью "деконструкторизации",
#--- в дальнейшем нам это ещё понадобится для передвижения
x, y = 0, 0

matrix[y][x] = str(number)

while cells != 0:

	for i in range(0, cells):
		number += 1
		y += dir[0]
		x += dir[1]

		matrix[y][x] = str(number)

	corners += 1

	if (dirIndex + 1 < 4):
		dirIndex += 1
		dir = moves[dirIndex]
	else:
		dirIndex = 0
		dir = moves[dirIndex]
	
	if corners == 2:
		corners = 0
		cells -= 1


#--- шаг 3
for row in matrix: 
   print(" ".join(row))

#--- Конец программы