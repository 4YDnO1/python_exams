#---
#--- Задача 5. Экз №2.
#--- Создание матрица размерами n на n
#--- с закручиванием по спирали к центрту
#--- с попутным увелечением значения
#--- ячейки от 1 до n^2
#---


#--- выполнение задачи идёт путём 3 шагов
#--- 1 шаг
#--- принятие размера и создание шаблона матрицы

#--- 2 шаг
#--- заполнение матрицы правильными данными:
#--- заполняем первое значение
#--- заполняем данные линии n - 1
#--- попутно каждые 2 поворота уменьшаем на -1 кол-во ячейек в линии

#--- 3 шаг
#--- 2-ух цикольный вывод созданной матрицы матрицы


#--- Начало программы

#--- 1 шаг

#-- принятие размера матрицы
n = int(input())

#-- создание шаблона n на n (запонен нулями)

#-- массив строк (рядов)
matrix = []

#-- цикл заполнения матрицы (строки)
for y in range(n):

	#-- строка в массиве (массив значение в ней)
	newRow = []

	#-- цикл заполнеия строки (массива)
	for x in range(n):

		#-- добовление "шаблонного" 0 в конец строки
		newRow.append(str(0))

	#-- добовление готовой строки в матрицу
	matrix.append(newRow)


#--- 2 шаг

#--- счётчик цифр по спирали
number = 1

#--- счётчик пройденных углов по спирали
#--- (начинаем с -1 т.к. с начала пройдём 3 раза n - 1 
#--- а остальные по 2 (например: 2 по 3, 2 по 2, 2 по 1))
corners = -1

#--- счётчик заполнения ячеек от n-1 до 0
#--- уменьшается каждые 2 пройденных угла (c начала с 3 поворотов) 
cells = n - 1

#--- массив направлений движения (по часовой)
moves = [[-1, 0], [0, 1], [1, 0], [0, -1]]

#--- начальное направление (в право) - индекс 1 в движениях
dirIndex = 1
#--- запись в переменную (dir) набор значений для движения вправо
dir = moves[dirIndex]

#--- начальные координаты x, y
#--- в дальнейшем они понадобится для передвижения
x, y = 0, 0

#--- первый элмент в матрице и он равен 1 (т.к. number начинается с 1)
matrix[y][x] = str(number)


#--- Главный цикл движения пока кол-во движений перед поворотом
#--- не достигнет нуля (т.е. дойдёт до центра)
while cells != 0:

	#--- Цикл передвижения в направлении перед поворотом
	#--- по спирале и попутная запись и увелечение значений (от 1 до number^2)
	for i in range(0, cells):

		#--- увелечение значения (сразу т.к. прежде мы
		#--- начали записывать с "1")
		number += 1

		#--- передвиженение в по координатам
		#--- в текущем направлении
		y += dir[0]
		x += dir[1]

		#--- запись значения по этим координатам
		matrix[y][x] = str(number)

	#--- увеличиваем счётчик пройденных углов 
	corners += 1

	#--- Проверка выхода за массив направлений и поворот
	#--- если удовлетворяет, оставляем и "поворачиваем"
	#--- т.е. записываем новые значения для движения
	#--- P.S. всего направлений 4 соответсвенно
	#--- 0, 1, 2, 3 (где 0 - вверх)
	if (dirIndex + 1 < 4):

		#--- увеленчение счётчика направления
		#--- или же поворот по часовой
		dirIndex += 1

		#--- запись нового массива пар значений
		#--- из массива всех движений (moves)
		#--- для передвижения в направлении (dirIndex)
		dir = moves[dirIndex]

	#--- иначе сбрасываем на 0 (вверх) и "поворачиваем"
	else:

		#--- сбрасываем с 3-его "направления" (влево)
		#--- на 0-вое (вверх)
		dirIndex = 0

		#--- запись массива пары значений из массива направлений
		#--- dirIndex = 0 - т.е. это вверх (или же сброс)
		dir = moves[dirIndex]
	
	#--- проверка счётчика пройденных углов
	#--- если прошли 2 угла, сбрасываем
	#--- и уменьшаем количество "ячеек" перед следующим поворотом
	#--- (изначально "-1" т.к. надо 3 раза повернуть перед тем как
	#--- начнёт уменьшаться их колличество)
	if corners == 2:

		#--- сброс кол-ва пройденных углов соответственно
		corners = 0

		#--- уменьшение кол-ва ячеек перед след. поворотом
		cells -= 1


#--- шаг 3 (Вывод)
for row in matrix:

	#--- вывод строки матрицы (join соединяет элементы в массиве
	#--- с заданным раздилителем (" ") (пробел в данном случае))
	#--- только
	print(" ".join(row))

#--- Конец программы